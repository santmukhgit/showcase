apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-fastapi-service-gcr-spanner
  title: Python FastAPI Service
  description: Create a Python FastAPI service
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - fast-api
spec:
  owner: infrastructure
  type: component

  parameters:
    - title: Service / Application details
      required:
        - app_name
        - dataClassification
      properties:
        app_name:
          title: Name
          type: string
          description: Unique name of the service
          ui:autofocus: true
          ui:options:
            rows: 3
          ui:placeholder: |
            Enter the service name without any whitespaces
        description:
          title: Description
          type: string
          description: Details about the service
          ui:options:
            rows: 3
          ui:placeholder: |
            Enter a description that appears in the software catalog
        iRiskId:
          title: iRisk Id
          type: string
          description: iRisk Id for this service
          ui:options:
            rows: 3
        dataClassification:
          title: Data Classification
          type: string
          description: Sensitivity of the data stored and/or processed by this service
          default: Business Use
          enum: [Public, Business Use, Highly Restricted, Secret]
          ui:options:
            rows: 3
        costCenter:
          title: Cost Center
          type: string
          description: Cost center associated with this service
          ui:options:
            rows: 3

    - title: Infrastructure details
      required:
        - project_id
      properties:
        project_id:
          title: Project ID
          type: string
          description: ID of an existing project 
          ui:autofocus: true
          ui:options:
            rows: 3
        resourceUserGroup:
          title: Resource User Group
          type: string
          description: Members of this Genie group will have access to all the resources being provisioned (repo, pipelines, infrastructure)
          ui:options:
            rows: 3
        resourceAdminGroup:
          title: Resource Admin Group
          type: string
          description: Members of this Genie group will have administrative access to the resources being provisioned
          ui:options:
            rows: 3

    - title: Database details
      required:
        - databaseName
      properties:
        databaseName:
          title: Database Name
          type: string
          description: Name of the database
          ui:options:
            rows: 3

  steps:
    - id: fetch-base-app
      name: Fetch Application Base
      action: fetch:template
      input:
        url: https://github.com/santmukhgit/jinaldesailive_fastapi-azure-template/tree/main/fast-api-skeleton/content
        targetPath: ./app-${{ parameters.app_name }}
        values:
          project_id: ${{ parameters.project_id }}
          app_name: ${{ parameters.app_name }}
          description: ${{ parameters.description }}
          db_name: ${{ parameters.databaseName }}

    - id: publish-app
      name: Publish Application
      action: publish:github
      input:
        allowedHosts: ['github.com']
        defaultBranch: main
        description: This is Python FastAPI app ${{ parameters.app_name }} in project ${{ parameters.project_id }}
        repoUrl: github.com?owner=santmukhgit&repo=app-${{ parameters.app_name }}
        repoVisibility: public
        protectDefaultBranch: false
        sourcePath: ./app-${{ parameters.app_name }}

    # - id: fetch-base-cloud-run
    #   name: Fetch Cloud Run Base
    #   action: fetch:template
    #   input:
    #     url: https://github.com/monkmantra/terraform-cloudrun-template/tree/main/cloud-run-skeleton/content
    #     targetPath: ./terraform-${{ parameters.app_name }}
    #     values:
    #       project_id: ${{ parameters.project_id }}
    #       app_name: ${{ parameters.app_name }}
    #       description: ${{ parameters.description }}
    #       db_name: ${{ parameters.databaseName }}

    # - id: publish-infra
    #   name: Publish Infra
    #   action: publish:github
    #   input:
    #     allowedHosts: ['github.com']
    #     defaultBranch: main
    #     description: This is cloud run ${{ parameters.app_name }} in ${{ parameters.project_id }}
    #     repoUrl: github.com?owner=monkmantra&repo=terraform-${{ parameters.app_name }}
    #     repoVisibility: public
    #     protectDefaultBranch: false
    #     sourcePath: ./terraform-${{ parameters.app_name }}

    - id: register-app
      name: Register App
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-app'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    # - id: register-infra
    #   name: Register Infra
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps['publish-infra'].output.repoContentsUrl }}
    #     catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: FastAPI App Repository
        url: ${{ steps['publish-app'].output.remoteUrl }}
      # - title: Terraform Infra Repository
      #   url: ${{ steps['publish-infra'].output.remoteUrl }}
      - title: Open Application in catalog
        icon: catalog
        entityRef: ${{ steps['register-app'].output.entityRef }}
      # - title: Open Infra in catalog
      #   icon: catalog
      #   entityRef: ${{ steps['register-infra'].output.entityRef }}
